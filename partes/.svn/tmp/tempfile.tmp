\input{preamble}           % Eliminarlo al compilar el documento maestro, ponerlo para compilarlo separado

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                                           %%
%%                             Tesis Doctoral:                               %%
%%                        Juan Luis Jimenez Laredo                           %%
%%                                                                           %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%\cabecera{cap:p2pcompt}{Peer-to-Peer Computing} %Descomentarlo para compilar maestro
\chapter{\textit{Peer-to-Peer Computing}}
\label{cap:p2pcompt}
%\cabecera{cap:p2pcompt}{Peer-to-Peer Computing} %Descomentarlo para compilar maestro

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Peer-to-Peer computing is the general term describing all issues related
to P2P systems.  % Menuda tautología! - JJ
Such issues include protocols development, security
management, analysis of performance or application areas
\cite{DBLP:conf/p2p/2005lncs}.  

Peers (that will be also referred as \emph{nodes} regarding
communication graphs) are equal entities able to establish a
self-organized and decentralized communication using their own routing
mechanisms. Therefore, the working principle of the P2P technology
relies on the ability of every \emph{peer} to behave autonomously as a
\emph{servent}, that is, every peer can act either as a SERVer or a
cliENT (or both).

Such a dual operational mode has demonstrated to be a good way for the
harnessing of decentralized resources at the \emph{edges} of the network
(e.g. storage or computing power), giving a single coherent view to the
system. The aim of this thesis is, therefore, to use P2P technology as a
computing platform in the application area of Evolutionary Algorithms. 

<<<<<<< .mine
In order to provide a general understaning of P2P technology, this chapter reviews in Section \ref{sec:p2ptaxonomy} the taxonomy the P2P systems according to different criteria such as application areas, system architectures and decentralized approaches. In such a context, Section \ref{sec:p2pnewscast} dives on the analysis of the specific protocol that will be used throughout this thesis, the \emph{newscast} protocol. Finally, some conclusions are drawn in Section \ref{sec:p2pconclusions}.
=======
In order to provide a general understaning of P2P technology, this
chapter reviews in Section \ref{sec:p2ptaxonomy} the taxonomy the P2P
systems according to different application areas, system architectures
and decentralized approaches. In such a context, Section
\ref{sec:p2pnewscast} dives in the analysis of the specific protocol
%dives in es muy inespecífico. Di que consigue con éxito afrontar todos
%los problemas que plantean los sistemas P2P - JJ
that will be used throughout this thesis, the \emph{newscast}
protocol. Finally, some conclusions are drawn in Section
\ref{sec:p2pconclusions}. 
%Deja siempre bien claro lo que estás haciendo para esta tesis y lo que
%no. - JJ
>>>>>>> .r8

\section{General taxonomy of P2P systems}
\label{sec:p2ptaxonomy}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This section provides an overview on the different systems and applications known as P2P computing in order to establish the framework in which this thesis relies. First, P2P systems are reviewed by their application area in Section \ref{sec:p2papplication}. At this point and following a chronological order, P2P systems were initially used for file-sharing and Napster was the first P2P system appearing in 199x \cite{}. The controversial use of Napster for the ilegal sharing of copyright protected files in addition with its centralized look-up architecture led soon to the intervention of the service in 199x by simply closing the server. In order to cope with such limitations of having a centralized services, decentralized alternatives such as Gnutella 0.4 appeared \cite{}. In a nutshell, having a decentralized service. Therefore, Section \ref{sec:p2parchitecture} reviews the different system architectures of P2P systems. Finally, Section \ref{sec:p2pdecentralized}

new decentralized architecture



Our research: 
Application: Cycle-sharing,
Architecture: Fully decentralized
Network: Unstructured based on the gossiping protocol newscast
Design pattern: plain diffusion-distributed aggregation

\subsection{Application areas}
\label{sec:p2papplication}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


P2P systems have been widely used and mainly developed for file-sharing applications. Nevertheless, the power for the harnessing of distributed resources has moved the attention of researchers from different areas into P2P systems. Thus, Mobile ad-hoc networks (MANET) has been modelled following a P2P approach \cite{}, Voice over IP (VoIP) protocols can be understood as an instance of P2P protocols \cite{} or Desktop Grid applications (DG) for cycle-sharing applications. In the widest sense, P2P is a key for understanding, approaching and modelling distributed resources providing a single coherent view of the system.


MANET,Information (presence, VoIP, Collaboration), file sharing,  cycle-sharing (in the way of DGC-- SETI BOINC)

- cycle-sharing -

\subsection{System Architecture}
\label{sec:p2parchitecture}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Centralized, Decentralized, Hybrid(Superpeers)

Centralized: Napster or Boinc

Hybrid: e.g. Gnutella 0.6 establishes a hub based network \cite{gnutella06}.
Superpeers and leafnodes. Superpeers act as hubs with a higher degree than leafnodes and determine the structure of the overlay network. The degree of leafnodes still scales following a power-law distribution. The number of superpeers still scale according to the network size. The aim is reducing the load of the network.


Decentralized: (Pure or unstructured referred to gossip based approaches or structured based on DHT)

Figure \ref{fig:p2parchitectures} shows three of the most common system architectures.



\begin{figure}[htbp]
\centering
\subfigure{\includegraphics[width=0.4\textwidth]{clienteservidor}}\\
\subfigure{\includegraphics[width=0.7\textwidth]{hibrido}}\\
\subfigure{\includegraphics[width=0.4\textwidth]{decentralizado}}
\caption{From top to bottom. Client-Server, hybrid and decentralized architectures.}
\label{fig:p2parchitectures}
\end{figure}
% De dónde lo has sacado? Cita la fuente, si lo has dibujado tú di
% ``inspirado en'' - JJ

- fully decentralized -

\subsection{Decentralized architectures}
\label{sec:p2pdecentralized}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Fully decentralized networks:
Network taxonomy: structured, unstructured (.... gossiping)

structured 
DHT mainly focused on the lookup problem.

- unstructured - 


% De momento comento esta seccion porque creo que no aporta demasiado a este capítulo
% -- Juanlu
%\section{Design patterns}
%\label{}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Design patterns: plain diffusion, replication, stigmergy composite design patterns

%- plain diffusion:distributed aggregation - 

%distributed aggregation.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Newscast Computing}
\label{sec:p2pnewscast}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Todo esto tienes que haberlo definido antes. En todo caso, el
% protocolo no es dinámico, sino que es un protocolo para sistemas
% dinámicos. Habla siempre con propiedad. - JJ
Newscast is a dynamic and self-organized gossiping protocol for the maintenance of unstructured P2P
overlay networks \cite{jelasity:newscast}. Without any central services or servers, newscast differs from other similar approaches --citar otros gossip y DHTs -- by its simplicity and scalability:

\begin{enumerate}
\item The membership management follows a extremely simple protocol: In
      order to join a group, a given node just has to contact any node
      within the system from which gets a list of its neighbors
      members. Additionally, to leave the group, the node just requires
      to stop communicating for a predefined time.

\item The dynamics of the system follow a probabilistic scheme able to keep a self-organized equilibrium at a macroscopic level. Such an equilibrium emerges from the loosely-coupled and decentralized run of the protocol within the different and independent nodes. The emerging macro-structure behaves as a small-world \cite{wattsstrogatz} allowing a scalable way for disseminating information and, therefore, making the system suitable for distributed computing.

\item Despite the simplicity of the scheme, newscast is fault-tolerant and exhibits a graceful degradation without requiring an extra mechanism other than its own emergent macro-behavior.
\end{enumerate}



Algorithm \ref{alg:newscast} shows the pseudo-code of the 
newscast protocol. Each node 
keeps its own set of neighbors by a cache that contains $c \in \N$ entries, referring to $c$ other nodes in the network without duplicates. Each entry provides a reference to the node in which it was created and a time-stamp of the entry creation (allowing the replacement of old items).



%%%%%%%%%%%%%%%%%%%%%%
\begin{algorithm}
\caption{Newscast protocol in $node_i$}
\label{alg:newscast}
\scriptsize
\begin{algorithmic}


\STATE {\large Active Thread}
\LOOP 
\STATE wait $t_r$
\STATE $node_j$ $\Leftarrow$ Uniformly random selected node from $Cache_i$
\STATE send $Cache_i$ to $node_j$
\STATE receive $Cache_j$ from $node_j$
\STATE $Cache_i$ $\Leftarrow$ Aggregate ($Cache_i$,$Cache_j$)
\ENDLOOP
\STATE
\STATE {\large Passive Thread}
\LOOP
\STATE wait $Cache_k$ from $node_k$
\STATE send $Cache_i$ to $node_k$
\STATE $Cache_i$ $\Leftarrow$ Aggregate ($Cache_i$,$Cache_k$)
\ENDLOOP
\STATE
\STATE {\large $Cache_{aggregated}$ $\Leftarrow$ Aggregate($Cache_a$,$Cache_b$)}
\STATE $Cache_{aggregated} \Leftarrow Cache_a \cup Cache_b$
\STATE Keep the $c$ freshest items in $Cache_{aggregated}$ according with the time-stamp.
\end{algorithmic}
\end{algorithm}
%%%%%%%%%%%%%%%%%%%%%%


There are two different tasks that the algorithm carries out within each
node. The active thread which pro-actively initiates a cache exchange once every cycle (one cycle takes $t_r$ time units) and the passive
thread that waits for data-exchange requests. 

Every cycle each $node_i$ initiates a cache exchange.
It selects randomly a neighbor $node_j$ from its $Cache_i$ with uniform probability.
Then $node_i$ and $node_j$ exchange their caches and merge them following an aggregation function.
In this case, the aggregation consists of picking the freshest $c$ items from $Cache_i \cup Cache_j$ 
and merging them into a single cache that $node_i$ and $node_j$ will share.

\subsection{Communication Graph Series}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The dynamic sequence of relations between the different nodes defines a
series of communication digraphs (directed graphs) notated $D_t$ at time
$t$ starting, therefore, at $D_0$. In order to analyze the graph
subseries $D_{it_r} (i=0,\dots,N)$, we assume that a complete
communication cycle occurs within a time interval
$[it_r,(i+1)t_r]$. Given  the low communication exchange calls
frequencies (this property will be analyzed in Section
\ref{sec:informationdissemination} around the results in
Fig. \ref{fig:informationexchange}) this assumption is not unrealistic
as long as the information exchange is short with respect to $t_r$.

In order to complete the characterization of the graph series, we will analyze two of the most relevant properties in the communication graph $G_t$ obtained from dropping the orientation in $D_t$: the average path length and the clustering coefficient. The average path length of a node $n_i$ is the average of the minimal path between $n_i$ and the rest of nodes while the clustering coefficient of $n_i$ represents the fraction of its neighbors which are also neighbors between them. 



\subsection{Bootstrapping and Convergence}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Esto quién lo ha hecho? Forma parte de la tesis? Lo has hecho tú? Deja
% claro si es una aportación o no - JJ
This section dives on the self-organized dynamics of the newscast
communication graph series, showing that, independently of the
initialization criterion, the graph is able to bootstrap and converge to
stable conditions.  Figure \ref{fig:fromrandomws} represents the
convergence of the graph series bootstrapping from a random and a
small-world graph at $G_0$. In quite an early stage, i.e. around
$G_{12t_r}$, the graph has already converged to an state of dynamic
equilibrium with independence of the initial graph $G_0$. 

\begin{figure*}[htbp]
\centerline{\subfigure{\includegraphics[width=2.8in]{lengthrandomws}
}
\hfil
\subfigure{\includegraphics[width=2.8in]{clusteringrandomws}
}}
\caption{Convergence of the average path length ({\em left}) and
 clustering coefficient ({\em right}) bootstrapping from a random and a
 Watts-Strogatz (ws) graph for a number of nodes $n=1600$. It can be
 seen how the graph converges  to the same values within the interval
 $G_{0t_r-20t_r}$ showing the independence of the newscast protocol  % De _todo_ el protocolo? Dí qué parte o efecto o atributo es independiente - JJ
with respect to the initialization criterion.}
\label{fig:fromrandomws}
\end{figure*}

Nevertheless, the cache size ($c$) plays here an important role. It represents the maximum degree of a node, and therefore, influences the average path length and the clustering coefficient. For example, Figure \ref{fig:fromrandom} shows newscast converging to different values depending on $c$.

\begin{figure*}[htbp]
\centerline{\subfigure{\includegraphics[width=2.8in]{lengthfromrandom}
}
\hfil
\subfigure{\includegraphics[width=2.8in]{clusteringfromrandom}
}}
\caption{Convergence of the average path length ({\em left}) and clustering coefficient ({\em right}) bootstrapping from a random graph for different cache sizes and a number of nodes $n=1600$}
\label{fig:fromrandom}
\end{figure*}


In addition, Figure \ref{fig:newscast} depicts the influence of the cache size on the average path length and the clustering coefficient for different network sizes. A smaller $c$ implies a higher clustering coefficient and also a higher average path length.

\begin{figure*}[htbp]
\centerline{\subfigure{\includegraphics[width=2.8in]{length}
}
\hfil
\subfigure{\includegraphics[width=2.8in]{clustering}
}}
\caption{Converged average path length ({\em left}) and clustering coefficient ({\em right}) for $G_{40t_r}$ and different network and cache sizes ($c$).}
\label{fig:newscast}
\end{figure*}

Based on such features, a newscast graph can behave as a small-world by tuning $c$ to the adequate values. In this sense, Jelasity and van Steen states in \cite{jelasity:newscast} that the intended normal setting of newscast is $c \ll n$.; For $c \ll n$, newscast has the small average path length of random graphs but, as shown in Figure \ref{fig:randomnws}, a much higher clustering coefficient \cite{spyros:robustscalable}.


\begin{figure*}[htbp]
\centerline{\subfigure{\includegraphics[width=2.8in]{randomnwsc10}
}
\hfil
\subfigure{\includegraphics[width=2.8in]{randomnwsc20}
}}
\caption{Clustering coefficients for equivalent random and newscast graphs (i.e. nodes have the same number of edges, ten on the left and twenty on the right). The higher values in the newscast graphs point to a small-world topology.}
\label{fig:randomnws}
\end{figure*}

\subsection{Robustness}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

One of the important issues regarding P2P computing is the robustness of the underlying protocols such as newscast, that is, protocols describe the dynamics of the communication graph series ($G_t$) in a contineous changing environment. In this section, we consider two important aspects regarding the robustness of the newscast protocol\footnote{Results are reproduced from \cite{spyros:robustscalable}.}.

\begin{enumerate}
\item The probability of spontaneous partitioning of $G_t$.
\item The robustness of newscast to node removals.
\end{enumerate}


%%%%%%%%%%%%%%%%% 
\begin{figure}[htbp]
\centerline{\includegraphics[width=0.8\textwidth]{spontaneous}}
\caption{Probability of spontaneous graph partitioning as a function of the cache size. Probabilities are obtained from 50 independent runs starting at the random graph $G_0$ until $G_{20000t_r}$ or partitioning.}
\label{fig:spontaneous}
\end{figure}
%%%%%%%%%%%%%%%%% 

The spontaneous partitioning of the communication graph series means that a subgraph becomes disconnected within the interval $G_{0-t}$ as a consequence of the protocol dynamics. Figure \ref{fig:spontaneous} shows that in newscast the probability of spontatneous partitioning is mainly influenced by the cache size $c$. Despite the results showing that the null probability is reached for $c=10$, it has to be considered that results are obtained over 50 independent runs for relatively small networks within the interval $G_{0-20000t_r}$ and, therefore, it might be still posible to get a partition considering larger networks, a larger number of runs or a larger time interval. In this sense, the seminal study in \cite{jelasity:newscast} extends such results and establishes that the probability of spontaneous partitioning is almost negligible from $c=20$ ahead.


%%%%%%%%%%%%%%%%% 
\begin{figure*}[htbp]
\centerline{\subfigure{\includegraphics[width=2.8in]{numberclusters}
}
\hfil
\subfigure{\includegraphics[width=2.8in]{sizeofcluster}
}}
\caption{Partitioning of the communication graph as a function of the percentage of removed nodes in $G_0$ (random graph) and the newscast subgraph $G_{20t_r}$. Results are averaged from 50 independent runs and n=5000.}
\label{fig:numberclusters}
\end{figure*}
%%%%%%%%%%%%%%%%% 

Nevertheless, previous results on the spontaneous partitioning of $G_t$ do not take into account peers faults which is an inherent feature of Peer-to-Peer systems known as \emph{churn} \cite{Stutzbach06Understanding}. Churn emerges from the collective dynamics of peers joining and leaving the system. Given that the running platforms use to be highly unreliable (e.g. the Internet) protocols have to be well-suited for tolerating faults. Therefore, we study in Figure \ref{fig:numberclusters} the robustness of newscast in an scenario in which nodes are removed up to none is left. It can be seen how newscast inherits the robust behavior of random graphs, especially when $c$ is large. On the one hand, the graph remains connected until a large percentage of nodes are removed, e.g. for $c=40$ $90\%$ of the nodes have to be removed to get a partition of the graph. On the other hand, most of the nodes remain in the larger cluster once the partition takes place. 



\subsection{Dissemination of the information}
\label{sec:informationdissemination}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In order to make distributed computing possible, a key element in distributed system is having a reliable information flow. Taking into account the decentralized and unreliable nature of P2P systems, newscast guarantees a scalable and reliable dissemination of the information by implementing a probabilistic \emph{epidemic} multi-casting scheme. As in infectious diseases, a piece of information is able to "infect" the "healthy" neigborhood of a given carrier node. The speed of dissemination is high at the small-world structure of the communication graph and the process is likely to "infect" the whole graph in few time steps.

Such an effect can be visualiezed in the following experiment. At time $0$ one node produces a piece of information (so-called a news item) that is sent to one of the neighbors every time-step. Once that a node is "infected" begins to act as a replicant and sends the news item to its neighborhood. This way, Figure \ref{fig:takeover} shows the proportion of "infected" nodes as a function of time. To this end, a complete graph and two different parameterized newscast graph were considered. 

%%%%%%%%%%%%%%%%%  
\begin{figure*}[htbp]
\centerline{\includegraphics[width=0.6\textwidth]{disseminationnewscast}
}
\caption{Dissemination speed of a news item through the entire network for a complete graph and two newscast graphs with $c=10$ and $c=20$. Results are averaged from 50 independent runs for a network size of $n=1600$.}
\label{fig:takeover}
\end{figure*}
%%%%%%%%%%%%%%%%% 

Similar curves in Figure \ref{fig:takeover} denote equivalent speeds in the dissemination of information induced by both kind of topologies.  Nevertheless, the node degree in complete graphs of size $n$ is $n-1$ while the average degree in newscast is approximately $2c$ pointing out a better scalability of the small-world approach given that the intended normal setting of newscast is $c \ll n$.



%%%%%%%%%%%%%%%%% 
\begin{figure}[htbp]
\centerline{\includegraphics[width=0.6\textwidth]{informationexchange}}
\caption{ Information exchange calls probability in a fixed node during a time interval $t_r$ (cycle). Results are estimated in the graph series $D_0 \dots D_{10000t_r}$ where $D_0$ is a random graph.}
\label{fig:informationexchange}
\end{figure}
%%%%%%%%%%%%%%%%% 


In addition to a lower node degree than in complete graphs, the low frequencies of the information exchange calls are a good indicator of the scalability of the protocol as depicted in Figure \ref{fig:informationexchange}. Independently of the network and cache sizes (i.e. assuming $c \ll n$), a node receives at any given cycle $t_r$ less than 4 information requests with probability $p > 0.8$ and less than 8 with $p > 0.98$. Therefore, a randomly chosen node is likely to process few requests in a cycle. Whenever $t_r$ is large enough with respect to a single request (e.g. 20 times larger) the protocol run does not represent a bottleneck on the system even when considering large network sizes.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Conclusions}
\label{sec:p2pconclusions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This chapter provides a general overview of the Peer-to-Peer Computing area. In order to provide an adequate understanding of P2P systems, a general taxonomy of the application areas, the system architectures and the different ways of approaching fully-decentralized schemes is introduced. 

In addition, the chapter focuses on an extensive analysis of the newscast protocol that will be used within this thesis as the underlying running platform for the experiments.
Newscast is a decentralized gossip-based protocol that follows an \emph{epidemic} scheme for disseminating the information. Despite its simplicity, it is a robust and scalable protocol able to self-organize the relations between peers into a small-world communication graph. That is, independently of the initial conditions the system converges to an state of dynamic equilibrium that behaves asymptotically as an small-world graph.



%%%%%%%%%%%%%% Bibliografia %%%%%%%%%%%%%%%

\bibliographystyle{alpha}  % Eliminarlo al compilar el documento maestro, ponerlo para compilarlo separado
\bibliography{p2pcomputing}%,gprop,mmitchell,zmich,hilera,fjmm,ripley,rbeale,jhertz,mag}       % Eliminarlo al compilar el documento maestro, ponerlo para compilarlo separado


\end{document}             % Eliminarlo al compilar el documento maestro, ponerlo para compilarlo separado
